/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package socialnetworkingsite;

import java.awt.Color;
import static java.awt.Color.BLACK;
import static java.awt.Color.BLUE;
import static java.awt.Color.RED;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import javax.swing.JLabel;
import java.sql.ResultSet;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.JTable;

/**
 *
 * @author hello
 */
public class Dashboard extends javax.swing.JFrame {
private int userID;
private String usernameSelected;
DefaultTableModel  model;
DefaultTableModel  model2;

int postClicked;
//Creating a new instance of userGraphStructure
UserGraphStructure userGraph = new UserGraphStructure();

    /**
     * Creates new form Dashboard
     */

    public Dashboard(int userID) {
       this.userID=userID;
       System.out.println("logged in as "+userID);
        initComponents();
        welcomeUser();
        setRecordsToTable(postTable);
        postTable.getTableHeader().setBackground(new Color(0, 0, 0, 0));
        postTable.setGridColor(RED);
        postTable.setForeground(BLACK);
        postTable.setShowGrid(true);
        postTable.getTableHeader().setOpaque(false); 
        GraphGenerator.initiateGraph(userGraph); //Calling the method to set the records from Database to the Graph Data Structure
         setReccomendedFriends(friendRecTable);
//         setMostPopular(mostPopularTable);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        peoplePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        followUser = new javax.swing.JTextField();
        followButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        friendRecTable = new javax.swing.JTable();
        welcomePane = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        postFieldd = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        postTable = new javax.swing.JTable();
        likeBtn = new javax.swing.JButton();
        postCategory = new javax.swing.JComboBox<>();
        topBtn = new javax.swing.JButton();
        fromFollowing = new javax.swing.JButton();
        forYouBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dashboard");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        peoplePanel.setBackground(new java.awt.Color(45, 15, 66));
        peoplePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Follow People");
        peoplePanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, -1, -1));
        peoplePanel.add(followUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 220, 30));

        followButton.setText("Follow");
        followButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followButtonActionPerformed(evt);
            }
        });
        peoplePanel.add(followButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, -1, -1));

        friendRecTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Based on current Following"
            }
        ));
        friendRecTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendRecTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(friendRecTable);

        peoplePanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 240, 470));

        getContentPane().add(peoplePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 0, 310, 700));

        welcomePane.setBackground(new java.awt.Color(23, 9, 33));
        welcomePane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setBackground(new java.awt.Color(0, 102, 102));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("View Profile");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        welcomePane.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, -1, -1));

        jButton3.setBackground(new java.awt.Color(0, 102, 102));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Logout");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        welcomePane.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 20, -1, -1));

        getContentPane().add(welcomePane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 60));

        jButton1.setText("Create Post");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 110, 110, 30));

        postFieldd.setColumns(20);
        postFieldd.setRows(5);
        jScrollPane3.setViewportView(postFieldd);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 560, 90));

        postTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        postTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PostID", "Username", "Post", "Likes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        postTable.setRowHeight(40);
        postTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                postTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(postTable);

        getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 870, 450));

        likeBtn.setText("Like Post");
        likeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(likeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 640, 110, 50));

        postCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Politics", "Sports", "Music", "Entertainment", "Science", "Comedy", " " }));
        getContentPane().add(postCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 70, 110, 30));

        topBtn.setBackground(new java.awt.Color(51, 0, 102));
        topBtn.setFont(new java.awt.Font("Trebuchet MS", 3, 12)); // NOI18N
        topBtn.setForeground(new java.awt.Color(255, 255, 255));
        topBtn.setText("Top Posts");
        topBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topBtnActionPerformed(evt);
            }
        });
        getContentPane().add(topBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 150, 140, 30));

        fromFollowing.setBackground(new java.awt.Color(0, 51, 51));
        fromFollowing.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fromFollowing.setForeground(new java.awt.Color(255, 255, 255));
        fromFollowing.setText("From Following");
        fromFollowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromFollowingActionPerformed(evt);
            }
        });
        getContentPane().add(fromFollowing, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 70, 140, 30));

        forYouBtn1.setBackground(new java.awt.Color(51, 0, 102));
        forYouBtn1.setFont(new java.awt.Font("Trebuchet MS", 3, 12)); // NOI18N
        forYouBtn1.setForeground(new java.awt.Color(255, 255, 255));
        forYouBtn1.setText("For You");
        forYouBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forYouBtn1ActionPerformed(evt);
            }
        });
        getContentPane().add(forYouBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 110, 140, 30));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        // TODO add your handling code here:
        String content= postFieldd.getText();
        createPost(content);
    }//GEN-LAST:event_createBtnActionPerformed

    private void followButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followButtonActionPerformed
        // TODO add your handling code here:
        String usernameToFollow=followUser.getText().trim();
        int IDtoFollow=getUserIdByUsername(usernameToFollow);
        followUser(userID,IDtoFollow);
        setReccomendedFriends(friendRecTable);
    }//GEN-LAST:event_followButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Profile(userID).setVisible(true);
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void likeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likeBtnActionPerformed
        // TODO add your handling code here:
        LikePost(postClicked);
        
    }//GEN-LAST:event_likeBtnActionPerformed

    private void postTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_postTableMouseClicked
        // TODO add your handling code here:
        int rowNo = postTable.getSelectedRow();
        TableModel model = postTable.getModel();

        postClicked= Integer.parseInt(model.getValueAt(rowNo, 0).toString());
        
    }//GEN-LAST:event_postTableMouseClicked

    private void friendRecTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendRecTableMouseClicked
        // TODO add your handling code here:
        int rowNo = friendRecTable.getSelectedRow();
        TableModel model = friendRecTable.getModel();

        usernameSelected= model.getValueAt(rowNo, 0).toString();
        followUser.setText(usernameSelected);
    }//GEN-LAST:event_friendRecTableMouseClicked

    private void topBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topBtnActionPerformed
        // TODO add your handling code here:
        setRecordsToTable(postTable);
    }//GEN-LAST:event_topBtnActionPerformed

    private void fromFollowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromFollowingActionPerformed
        // TODO add your handling code here:
setFollowingPostToTable(postTable, userGraph,userID);        
    }//GEN-LAST:event_fromFollowingActionPerformed

    private void forYouBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forYouBtn1ActionPerformed
        // TODO add your handling code here:
        setForYouToTable(postTable);
    }//GEN-LAST:event_forYouBtn1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        new Login().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed
//Method to display which user is logged in:
    private void welcomeUser() {
    String loggedUsername= getUsernameByUserId(userID);
  JLabel newLabel = new JLabel("Welcome, "+loggedUsername+" (user"+userID+")!"); 
    newLabel.setFont(new Font("Arial", Font.BOLD, 28));  
    newLabel.setForeground(new java.awt.Color(240, 236, 229)); 
    welcomePane.add(newLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 5, 400, 50));
    welcomePane.revalidate();
    welcomePane.repaint();
}
    
//Method to Follow USers
private void followUser(int followerId, int followeeId) {
    Connection conn = dbConnection.dbconnect();
    
    try {
        PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Edge (follower_id, followee_id) VALUES (?, ?)");
        pstmt.setInt(1, followerId);
        pstmt.setInt(2, followeeId);
        pstmt.executeUpdate();
        conn.close();
        JOptionPane.showMessageDialog(null, followerId + "\t you now follow \t" + followeeId);
        userGraph.addConnection(followerId, followeeId);
//        updateGraph(followerId, followeeId);   
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
//Method to get username by User ID
private String getUsernameByUserId(int userId) {
    Connection conn = dbConnection.dbconnect();
    String username=null;
    try {
        String query = "SELECT UserName FROM Users WHERE UserId = ?";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setInt(1, userId);
        ResultSet rs = pstmt.executeQuery();
        if (rs.next()) {
            username = rs.getString("username");
        }
        conn.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    return username;
}

//And Vice Versa
private int getUserIdByUsername(String username) {
    Connection conn = dbConnection.dbconnect();
    int userid = 0;
    try {
        String query = "SELECT UserId FROM Users WHERE UserName = ?";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setString(1, username);
        ResultSet rs = pstmt.executeQuery();
        if (rs.next()) {
            userid = rs.getInt("UserId");
        }
        conn.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    return userid;
}

private int getCategoryId(Connection conn, String categoryName) throws SQLException, java.sql.SQLException {
    String query = "SELECT CategoryId FROM Categories WHERE CategoryName = ?";
    PreparedStatement pstmt = conn.prepareStatement(query);
    pstmt.setString(1, categoryName);
    ResultSet rs = pstmt.executeQuery();
    if (rs.next()) {
        int categoryId = rs.getInt("CategoryId");
        rs.close();
        pstmt.close();
        return categoryId;
    } else {
        // If category not found, throw an exception
        rs.close();
        pstmt.close();
        throw new SQLException("Category not found: " + categoryName);
    }
}

private void createPost(String content){
    Connection conn = dbConnection.dbconnect();
    String category= postCategory.getSelectedItem().toString();
    try{
        int categoryId = getCategoryId(conn, category);

        PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Posts (content, userID, category_id) VALUES (?, ?, ?)");
        pstmt.setString(1, content); 
        pstmt.setInt(2, userID);
        pstmt.setInt(3, categoryId); 

        pstmt.executeUpdate();
        conn.close();
        JOptionPane.showMessageDialog(null, "Posted Successfully");
        setRecordsToTable(postTable);

    }catch (Exception ex){
        ex.printStackTrace();
    }
}

public void setRecordsToTable(JTable postTable){
    DefaultTableModel tableModel = (DefaultTableModel) postTable.getModel();
    tableModel.setRowCount(0);
        try{
            Connection con = dbConnection.dbconnect();
            PreparedStatement pst = con.prepareStatement("select * from Posts");
            ResultSet rs = pst.executeQuery();
            
            while(rs.next()){
                int PostId=rs.getInt("post_id");
                int UserId = rs.getInt("userID");
                String Content = rs.getString("content"); 
                 int Likes = rs.getInt("like_count"); 

                Object[] obj = {PostId,getUsernameByUserId(UserId), Content,Likes};
                model = (DefaultTableModel)postTable.getModel();
                model.addRow(obj);
            }
        
        
        }catch (Exception e) {
            e.printStackTrace();
        }
    }

public void setReccomendedFriends(JTable friendRecTable){
    DefaultTableModel tableModel = (DefaultTableModel) friendRecTable.getModel();
    tableModel.setRowCount(0);
    List<Integer> reccomendedUsers=userGraph.suggestUsersToFollow(userID);
//        List<Integer> mutualFollowers = gs.getMutualFollowers(userId);

    for (Integer user : reccomendedUsers) {
        String username = getUsernameByUserId(user);
        System.out.println(username);
        Object[] row = {username};
        model2 = (DefaultTableModel)friendRecTable.getModel();

        model2.addRow(row);
    }
    
        
    }


public void setForYouToTable(JTable postTable) {
    DefaultTableModel tableModel = (DefaultTableModel) postTable.getModel();
    tableModel.setRowCount(0);
    try {
        Connection con = dbConnection.dbconnect();
        
        PreparedStatement pst = con.prepareStatement("SELECT p.post_id, p.userID, p.content, p.like_count " +
                                                       "FROM Posts p " +
                                                       "INNER JOIN UserCategories uc ON p.category_id = uc.CategoryId " +
                                                       "WHERE uc.UserId = ?");
        pst.setInt(1, userID);
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            int postId = rs.getInt("post_id");
            int userId = rs.getInt("userID");
            String content = rs.getString("content");
            int likes = rs.getInt("like_count");

            Object[] obj = {postId, getUsernameByUserId(userId), content, likes};
            DefaultTableModel model = (DefaultTableModel) postTable.getModel();
            model.addRow(obj);
        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}


public void setFollowingPostToTable(JTable postTable, UserGraphStructure userGraph, int userId) {
    DefaultTableModel tableModel = (DefaultTableModel) postTable.getModel();
    tableModel.setRowCount(0);
    try {
        Connection con = dbConnection.dbconnect();
        List<Integer> followingList = userGraph.followingListOf(userId);
        PreparedStatement pst = con.prepareStatement("SELECT p.post_id, p.userID, p.content, p.like_count " +
                                                       "FROM Posts p " +
                                                       "WHERE p.userID IN (" + String.join(",", Collections.nCopies(followingList.size(), "?")) + ")");
        for (int i = 0; i < followingList.size(); i++) {
            pst.setInt(i + 1, followingList.get(i));
        }
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            int postId = rs.getInt("post_id");
            int postUserId = rs.getInt("userID");
            String content = rs.getString("content");
            int likes = rs.getInt("like_count");

            Object[] obj = {postId, getUsernameByUserId(postUserId), content, likes};
            DefaultTableModel model = (DefaultTableModel) postTable.getModel();
            model.addRow(obj);
        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}


private void LikePost(int postId){
    Connection conn = dbConnection.dbconnect();
    
    try{
        PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Likes (userID, postID) VALUES (?, ?)");
        pstmt.setInt(1, userID); 
        pstmt.setInt(2, postId);
        pstmt.executeUpdate();
        JOptionPane.showMessageDialog(null, "You have liked "+postId);
        PreparedStatement pstmt2 = conn.prepareStatement("UPDATE Posts SET like_count = like_count + 1 WHERE post_id = ?");
    pstmt2.setInt(1, postId);
    pstmt2.executeUpdate();
        conn.close();
        setRecordsToTable(postTable);

    }catch (Exception ex){
        ex.printStackTrace();
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard(0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton followButton;
    private javax.swing.JTextField followUser;
    private javax.swing.JButton forYouBtn1;
    private javax.swing.JTable friendRecTable;
    private javax.swing.JButton fromFollowing;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton likeBtn;
    private javax.swing.JPanel peoplePanel;
    private javax.swing.JComboBox<String> postCategory;
    private javax.swing.JTextArea postFieldd;
    private javax.swing.JTable postTable;
    private javax.swing.JButton topBtn;
    private javax.swing.JPanel welcomePane;
    // End of variables declaration//GEN-END:variables
}
