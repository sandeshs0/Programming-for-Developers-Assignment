/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package multithreadingimagedownloader;

import java.awt.Button;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.SecureRandom;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.JProgressBar;
/**
 *
 * @author hello
 */
public class MultithreadedImageDownloader extends javax.swing.JFrame {
    private static final String savedImagesFolder = "saved_images/"; //Initilizing Folder to save downloaded images
    private Map<Future<?>, DownloadInfo> downloadInfoMap; 
    private ExecutorService executorService;
    private List<Future<?>> downloadTasks;
    private HashMap<String, JProgressBar> progressBarMap;
    /**
     * Creates new form Image
     */
    public MultithreadedImageDownloader() {
        initComponents();
        executorService = Executors.newFixedThreadPool(5);
        downloadTasks = new CopyOnWriteArrayList<>();
        downloadInfoMap = new ConcurrentHashMap<>();
        progressBarMap = new HashMap<>();
    }
private static SecureRandom random = new SecureRandom();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        linkField = new java.awt.TextField();
        downloadButton = new java.awt.Button();
        jLabel1 = new javax.swing.JLabel();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        pauseButton = new java.awt.Button();
        resumeButton = new java.awt.Button();
        cancelButton = new java.awt.Button();
        loadingBar = new javax.swing.JProgressBar();
        label3 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(34, 0, 64));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        linkField.setBackground(new java.awt.Color(240, 236, 229));
        linkField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        linkField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkFieldActionPerformed(evt);
            }
        });
        jPanel1.add(linkField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 113, 496, 70));

        downloadButton.setBackground(new java.awt.Color(89, 111, 183));
        downloadButton.setFont(new java.awt.Font("Dubai Medium", 0, 24)); // NOI18N
        downloadButton.setForeground(new java.awt.Color(240, 236, 229));
        downloadButton.setLabel("Download");
        downloadButton.setName(""); // NOI18N
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });
        jPanel1.add(downloadButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(704, 128, -1, 41));

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Multi Threaded Image Downloader");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 31, 424, -1));

        label1.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        label1.setForeground(new java.awt.Color(255, 255, 255));
        label1.setText("Downloaded Images:");
        jPanel1.add(label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, -1, -1));

        label2.setFont(new java.awt.Font("Footlight MT Light", 0, 14)); // NOI18N
        label2.setForeground(new java.awt.Color(182, 187, 196));
        label2.setText("Note: To Download multiple images, separate each links with a comma (,).");
        jPanel1.add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 204, -1, -1));

        pauseButton.setBackground(new java.awt.Color(66, 125, 157));
        pauseButton.setFont(new java.awt.Font("Dubai Medium", 0, 18)); // NOI18N
        pauseButton.setForeground(new java.awt.Color(240, 236, 229));
        pauseButton.setLabel("Pause");
        pauseButton.setName(""); // NOI18N
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(pauseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(238, 263, 104, 32));

        resumeButton.setBackground(new java.awt.Color(238, 143, 37));
        resumeButton.setFont(new java.awt.Font("Dubai Medium", 0, 18)); // NOI18N
        resumeButton.setForeground(new java.awt.Color(240, 236, 229));
        resumeButton.setLabel("Resume");
        resumeButton.setName(""); // NOI18N
        resumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(resumeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(382, 263, 104, 32));

        cancelButton.setBackground(new java.awt.Color(134, 10, 53));
        cancelButton.setFont(new java.awt.Font("Dubai Medium", 0, 18)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(240, 236, 229));
        cancelButton.setLabel("Cancel");
        cancelButton.setName(""); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 263, 104, 32));

        loadingBar.setBackground(new java.awt.Color(105, 98, 173));
        loadingBar.setForeground(new java.awt.Color(105, 98, 173));
        jPanel1.add(loadingBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 354, 445, 24));

        label3.setFont(new java.awt.Font("Eras Light ITC", 1, 36)); // NOI18N
        label3.setForeground(new java.awt.Color(255, 255, 255));
        label3.setText("Links:");
        jPanel1.add(label3, new org.netbeans.lib.awtextra.AbsoluteConstraints(81, 127, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 580));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void linkFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linkFieldActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed

        String urlsText = linkField.getText();
        String[] urls = urlsText.split("[,\\s]+"); // Split the text by commas or whitespace
        for (String url : urls) {
            if (!url.isEmpty()) {
                downloadImage(url);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        // TODO add your handling code here:
        pauseDownloads();
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void resumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeButtonActionPerformed
        // TODO add your handling code here:
        resumeDownloads();
    }//GEN-LAST:event_resumeButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        cancelDownloads();
    }//GEN-LAST:event_cancelButtonActionPerformed
//method to dynamically add new images downloaded to the UI
    private void downloadedImages(String imageName, int height, int count){
    System.out.println(imageName+" download vayo");
  JLabel newLabel = new JLabel(count+". "+imageName); 
    newLabel.setFont(new Font("Arial", Font.BOLD, 16));  
    newLabel.setForeground(new java.awt.Color(240, 236, 229)); 
    jPanel1.add(newLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 400+height, 200, 100));
    jPanel1.revalidate();
    jPanel1.repaint();
}

//    Counters for Downloaded Image Label 
private int position = 0; //to change the postion of each label
private int count=1; //to set the numbered bullets 1,2,3

        private void downloadImage(String urlString) {
//            Creating a Thread with Runnable Interface provided by java 
        Runnable downloadTask;
        downloadTask = new Runnable() {
            @Override
            public void run() {
                DownloadInfo downloadInfo = downloadInfoMap.get(Thread.currentThread()); //Getting download info for cuurently running thread
                int progress = downloadInfo != null ? downloadInfo.getProgress() : 0; 
                try {
                    URL url = new URL(urlString); //creating url instance
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection(); // http connection request
                    connection.setRequestProperty("User-Agent", "Mozilla/5.0");

                        //Updating the range header if there is any progress
                    if (progress > 0) {
                        connection.setRequestProperty("Range", "bytes=" + progress + "-");
                    }

                    int responseCode = connection.getResponseCode(); //Getting the responsecode from http connection
                    
                 // Checking if the response is successful or inprogress download
                 if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_PARTIAL) {
                  int contentLength = connection.getContentLength();
           
            InputStream inputStream = connection.getInputStream();
            
          //Byte Array to store downloaded file
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            
            byte[] buffer = new byte[1024];
            int bytesRead;

                        while ((bytesRead = inputStream.read(buffer)) != -1) {
                            outputStream.write(buffer, 0, bytesRead);
                            progress += bytesRead;
                            int currentProgress = (int) ((progress / (double) contentLength) * 100);
                            SwingUtilities.invokeLater(new Runnable() {
                                @Override
                                public void run() {
                                    loadingBar.setValue(currentProgress);
                                }
                            });
                            
                            if (Thread.currentThread().isInterrupted()) {
                                throw new InterruptedException("Download interrupted");
                            }

                            Thread.sleep(50);
                        }


                            String fileName = "pic_" + random.nextInt(Integer.MAX_VALUE) + ".png";

                  
                        saveImage(outputStream.toByteArray(), fileName); 
                        downloadedImages(fileName,position,count); //Calling the method to add label
                        position += 20; //Updating the position counter
                        count+=1; //Updating the downloaded images count 
                      
            
                        JOptionPane.showMessageDialog(MultithreadedImageDownloader.this,
                                "Image downloaded successfully! \n"+fileName);
                        
                        // Opening the downloaded Image

                        File file = new File("C:\\Users\\hello\\OneDrive\\Documents\\NetBeansProjects\\MultiThreadingImageDownloader\\saved_images\\"+fileName);
                        System.out.println("File exists: " + file.exists());
                        System.out.println("Desktop is supported: " + Desktop.isDesktopSupported());

                           if (file.exists() && Desktop.isDesktopSupported()) {
                          Desktop.getDesktop().open(file);
                            }
//                       
                        inputStream.close();
                        outputStream.close();
                    } else {
                        throw new IOException("Failed to download image. Response code: " + responseCode);
                        
                    }
                    
                } catch (IOException | InterruptedException e) {
                    if (e instanceof InterruptedException) {
                        Thread.currentThread().interrupt();
                    }
                    if (!(e instanceof InterruptedException)) {
                        e.printStackTrace();
//                        JOptionPane.showMessageDialog(DownloaderGUI.this,
//                                "Error downloading image: " + e.getMessage());
                    }
                }
            }
        };

        Future<?> task = executorService.submit(downloadTask);
        downloadTasks.add(task);
        downloadInfoMap.put(task, new DownloadInfo(urlString, 0));
    }

//        Pause
        
        private void pauseDownloads() {
        for (Future<?> task : downloadTasks) {
            if (!task.isDone() && !task.isCancelled()) {
                task.cancel(true);
            }
        }
    }
        
        // Cancel        
            private void cancelDownloads() {
        for (Future<?> task : downloadTasks) {
            task.cancel(true);
        }
        loadingBar.setValue(0);
    }
            
//           Resume
         private void resumeDownloads() {
        for (Future<?> task : downloadTasks) {
            if (task.isCancelled()) {
                DownloadInfo downloadInfo = downloadInfoMap.get(task);
                if (downloadInfo != null) {
                    downloadImage(downloadInfo.getUrl());
                }
            }
        }
    }
         
//         Save Image
             private void saveImage(byte[] imageData, String fileName) {
        File directory = new File(savedImagesFolder);
        if (!directory.exists()) {
            directory.mkdirs();
        }

        String fullPath = savedImagesFolder + fileName;

        try {
            FileOutputStream outputStream = new FileOutputStream(fullPath);
            outputStream.write(imageData);
            outputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 private class DownloadInfo {
        private String url;
        private int progress;

        public DownloadInfo(String url, int progress) {
            this.url = url;
            this.progress = progress;
        }

        public String getUrl() {
            return url;
        }

        public int getProgress() {
            return progress;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MultithreadedImageDownloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MultithreadedImageDownloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MultithreadedImageDownloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MultithreadedImageDownloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MultithreadedImageDownloader().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button cancelButton;
    private java.awt.Button downloadButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.TextField linkField;
    private javax.swing.JProgressBar loadingBar;
    private java.awt.Button pauseButton;
    private java.awt.Button resumeButton;
    // End of variables declaration//GEN-END:variables
}
